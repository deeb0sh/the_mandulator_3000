import jwt from '@fastify/jwt'
import { headersJwtValid } from '../schemas/headersJWTvalid.js'
import { loginDelValid } from '../schemas/loginDelValid.js'
import getNetwork from '../utils/getNetwork.js' // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import getUserNetwork from '../utils/getUserNetwork.js' // —Å–º–æ—Ç—Ä–∏ –≤—Å–µ —Å–µ—Ç–∏ –∑–∞–Ω–µ—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
import syncwg from '../utils/syncwg.js'

export default async function wgCheckApi(fastify) {

    fastify.register(jwt, { // —Ä–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏—è jwt –ø–ª–∞–≥–∏–Ω–∞
        secret: process.env.JWT_SECRET // —Å–µ–∫—Ä–µ—Ç –≤.env JWT_SECRET=""
    })

    fastify.get('/wg/check', {
        schema: {
                headers: headersJwtValid // –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ö–µ–¥–µ—Ä–æ–≤ –æ–¥–∏–Ω JWT
            }
        },
        async (request, reply) => {
            try {
                fastify.log.info('üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É /wg/check');
                const decod = await request.jwtVerify() //–ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Ö —Ö–µ–¥–µ—Ä–∞
                const user = decod.user // –∏–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–∏–Ω , –¥–∞–ª—å—à–µ –±—É–¥–∏–º –∏—Å–∫–∞—Ç—å –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–≥
                const role = decod.role // –∏–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–ª—å

                fastify.log.info(`üßæ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user}, –†–æ–ª—å: ${role}`);
                const userCheck = await fastify.prisma.Users.findFirst({ // –∏—â–µ–º —Å–æ–ø–∞–¥–µ–Ω–∏—è –∏–º–µ—ë–Ω –≤ –±–¥ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è
                    where: {
                        login: user
                    },
                    select: {
                        id: true,
                        //role: true
                    }
                })
                if (!userCheck) { // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥ —Ç–æ —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –∏ –¥–∞—ë–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–µ—Ä–≤–µ—Ä–∞–º
                    fastify.log.info(`üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user}. –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å...`);
                    const newUser = await fastify.prisma.users.create({
                        data: {
                            login: user,
                            roleId: role
                        },
                    })
                    // —É–∑–Ω–∞—ë–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Å–µ—Ç–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const userSubnets = await fastify.prisma.userSubnet.findMany({
                        where: {
                          userId: newUser.id,  // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        },
                        select: {
                            serverName: true,
                            network: true
                        }
                    })
                    fastify.log.info(`üì° –ü–æ–¥—Å–µ—Ç–∏ —É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userSubnets.length}`);
                    // –µ—Å–ª–∏ —Å–µ—Ç–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –≤—ã—á–µ—Å–ª—è—Ç—å –∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∏—Ö
                    if (userSubnets.length === 0) {
                        fastify.log.info('üîç –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥—Å–µ—Ç–∏...');
                        const allNetRu = await getNetwork(fastify,user,'RU')
                        const allNetDe = await getNetwork(fastify,user,'DE')
                        const allNetFi = await getNetwork(fastify,user,'FI')

                        fastify.log.info(`üì¶ –°–µ—Ç–∏ (–≤—Å–µ): RU=${allNetRu.length}, DE=${allNetDe.length}, FI=${allNetFi.length}`);
                        const userNetRu = (await getUserNetwork(fastify, 'RU')).map(n => n.network);
                        const userNetDe = (await getUserNetwork(fastify, 'DE')).map(n => n.network);
                        const userNetFi = (await getUserNetwork(fastify, 'FI')).map(n => n.network);

                        fastify.log.info(`üõë –£–∂–µ –∑–∞–Ω—è—Ç—ã–µ —Å–µ—Ç–∏: RU=${userNetRu.length}, DE=${userNetDe.length}, FI=${userNetFi.length}`);
                        const freeNetRu = allNetRu.filter(subnet => !userNetRu.includes(subnet))
                        const freeNetDe = allNetDe.filter(subnet => !userNetDe.includes(subnet))
                        const freeNetFi = allNetFi.filter(subnet => !userNetFi.includes(subnet))   
                        fastify.log.info(`‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–µ—Ç–∏: RU=${freeNetRu.length}, DE=${freeNetDe.length}, FI=${freeNetFi.length}`);                    
                        if (freeNetRu.length > 0 || freeNetDe.length > 0 || freeNetFi.length > 0) {
                            await fastify.prisma.userSubnet.createMany({
                                data: [
                                  { userId: newUser.id, serverName: 'RU', network: freeNetRu[0]},
                                  { userId: newUser.id, serverName: 'DE', network: freeNetDe[0]},
                                  { userId: newUser.id, serverName: 'FI', network: freeNetFi[0] }
                                ],
                                skipDuplicates: true
                              });
                              fastify.log.info('üéØ –ü–æ–¥—Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
                        } 
                        else  {
                            fastify.log.error("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è");
                            return reply.send({ message: "invalid" , onErr: "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–µ—Ç–µ–π" })
                        }
                    fastify.log.info("‚úÖ —Å–µ—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã ");
                    }
                }
                // –ø—Ä–æ–º–µ—Ä—è–µ–º —Ä–æ–ª—å . –µ—Å–ª–∏ —Ä–æ–ª—å –ø–æ–º–µ–Ω—è–ª–∞—Å—å —Ç–æ –º–µ–Ω—è–µ–º –Ω–∞ –º–∞–Ω–¥—É–ª—è—Ç–æ—Ä–µ –∏ –æ—Ç—Å—ã–ª–∞–µ–º –∏–∑–º–µ–µ–Ω–∏—è TC –≤ –Ω–∞ wg-—Ç–æ—á–∫–∏
                const curentRole = await fastify.prisma.users.findFirst({
                    where: { login: user },
                    select: { roleId: true, }
                })
                if (curentRole.roleId !== role ) {
                    fastify.log.warn(`üîÑ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (${curentRole.roleId} ‚Üí ${role}), –æ–±–Ω–æ–≤–ª—è–µ–º...`);
                    await fastify.prisma.users.update({
                        where: { login: user },
                        data: { roleId: role }
                    })
                    // await syncwg(fastify, 'RU')
                    // await syncwg(fastify, 'DE')
                    // await syncwg(fastify, 'FI')
                    fastify.log.info(`üîÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è WireGuard –∫–æ–Ω—Ñ–∏–≥–æ–≤ –¥–ª—è ${loc}`);
                    for (const loc of ['RU', 'DE', 'FI']) {  // –∞—Ö—É–µ—Ç—å –∫–∞–∫ —á—ë—Ç–∫–æ
                        await syncwg(fastify, loc)
                    }
                    fastify.log.info(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
                }              
                // —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  (((((( –¢–û–õ–¨–ö–û –¢–£–¢ ))))))))
                if (!userCheck) { // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –≤ –±–∞–∑–µ —Ç–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    fastify.log.info('üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    return reply.send({ message: "first"}) // –º–æ–∂–Ω–æ –∏ –Ω–µ –ø–∏—Å–∞—Ç—å —ç—Ç–æ 
                }
                const allClinet = await fastify.prisma.users.findMany({
                    where: {
                        id: userCheck.id
                    },
                    select:{
                        clients: {
                                select: {
                                    id: true,
                                    name: true,
                                    ip: true,
                                    serverName: true
                            }
                        }
                    }
                })
                // if (!allClinet.length || allClinet[0].clients.length === 0) {       
                //     return reply.send({ message: "invalid"});
                // }
                fastify.log.info(`üì° –ü–æ–ª—É—á–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${allClinet[0]?.clients?.length || 0}`);
                return reply.send({ message: "valid", allClinet })
            }
            catch (err) {
                //return reply.redirect('/')
                fastify.log.error('üî• –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ /wg/check', err);
                return reply.send({ message: "invalid", onErr: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ 1", e: err })
            }
        }
    )

    fastify.delete('/wg/check',{
        schema: {
            headers: headersJwtValid, // –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ö–µ–¥–µ—Ä–æ–≤ –æ–¥–∏–Ω JWT
            body: loginDelValid // –≤–∞–ª–∏–¥–∞—Ü–∏—è login
        }},
        async (request, reply) => {
            try {
                const decod = await request.jwtVerify() // –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ö–µ–¥–µ—Ä–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
                const name = decod.user
                const role = decod.role
                if (role != 3) {
                    console.log(`[CHECK] —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${name} –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`)
                    return reply.send({ message: 'invalid' })
                }
                const { login } = request.body
                const userID = await fastify.prisma.users.findFirst({
                    where: {
                        name: login
                    },
                    select: {
                        id: true
                    }
                })
                
                await fastify.prisma.Client.deleteMany({
                    where: { userId: Number(userID) }
                })

                await fastify.prisma.UserSubnet.deleteMany({
                    where: { userId: Number(userID) }
                })

                await fastify.prisma.users.deleteMany({
                    where: { id: Number(userID) }
                })
                console.log(`[CHECH] –£–î–ê–õ–ï–ù–û - ${login} !!!`)
                return reply.send({ message: "valid" })
            } 
            catch (err) {
                console.log(`[CHECH] –û–®–ò–ë–ö–ê --- ${err} !!!`)
                return reply.send({ message: "invalid", error: err })
            }
        }
    )
}