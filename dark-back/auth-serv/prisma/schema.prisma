generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL") // .env ==> DATABASE_URL="хуёмаё"
}

model users {
  id String @id @default(uuid()) @unique
  login String @unique 
  password String // хэш пароля
  salt String // соль
  roleID Int @default(0) // id роли
  inCodeUsed String? // инвайт-код который использовался при регистрации
  lastLoginAt DateTime? // ластлогин 
  createAt  DateTime @default(now()) //дата создания записи
  updatedAt DateTime? // дата обновления записи

  inviteLists inviteList[] // массив инвайткодов пользователя
  sessions session[] // все сессии пользователя
}

model inviteList {
  id	Int	@id @default(autoincrement())
  code	String @unique // инвайткод
  authorID String // Внешний ключ, ссылающийся на users(id) Автор инвайта
  used Int @default(0) // Количество раз использовно
  limit Int @default(1) // сколько раз использовать
  createAt  DateTime @default(now()) // дата создания записи
  updateAt DateTime? // дата обновления записи
  active  Boolean @default(true) // в работе или нет код

  author    users    @relation(fields: [authorID], references: [id]) // Связь с моделью users по id
}

model session {
  id	Int	@id @default(autoincrement())
  ownerID String // --> users(id) 
  token String? // jwt будет жить тут
  exp DateTime // время жизни токена в часах (время портухания) 24 часа
  userIp String? // ip пользователя в момент получения
  userAgent String? // юзер агент
  fingerPrint String? // отпечаток безЖ ip
  createAt DateTime @default(now())
  updateAt DateTime?

  owner   users   @relation(fields: [ownerID], references: [id]) // Связь с моделью users по id
  @@index([exp]) // индексация поля exp
}
